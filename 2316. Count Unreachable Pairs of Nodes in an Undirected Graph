class Solution {
public:
int bfs(int node,vector<int>& vis,vector<int> adj[]){
    int cnt=0;
    vis[node]=1;
    queue<int> q;
    q.push(node);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        cnt++;
        for(auto i:adj[node]){
            if(!vis[i]){
                vis[i]=1;
                q.push(i);
            }
        }
    }
    return cnt;
}
    long long countPairs(int n, vector<vector<int>>& edges) {
        long long ans=0,tot=n;
        vector<int> adj[n];
        for(auto i:edges){
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }
        vector<int> vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                int cnt=bfs(i,vis,adj);
                ans+=(tot-cnt)*cnt;
                tot=tot-cnt;
            }
        }
        return ans;
    }
};
