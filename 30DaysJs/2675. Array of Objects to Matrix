/**
 * @param {Array} arr
 * @return {Matrix}
 */
function getValue(obj, key = '', res = []) {
    if (typeof obj === 'number' || typeof obj === 'string' || typeof obj === 'boolean' || obj === null) {
        return { [key]: obj };
    }

    for (const [k, v] of Object.entries(obj)) {
        const composedKey = key === '' ? k : key + '.' + k;
        res.push(getValue(v, composedKey));
    }

    return res.flat();
}

var jsonToMatrix = function (arr) {
    const ka = arr.map((e) => getValue(e)); 
    const allKeys = [...new Set(ka.flat().map((obj) => Object.keys(obj)[0]))].sort();

    const res = [allKeys];

    for (const row of ka) {
        res.push([]);
        for (const key of allKeys) {
            const v = row.find((r) => r.hasOwnProperty(key))?.[key];
            res.at(-1).push(v === undefined ? '' : v);
        }
    }

    return res;
};
