/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* reverseK(ListNode* &head,int k){
        //reverse at k interval O(N)
        ListNode* prevptr=NULL;
        ListNode* currptr=head;
        ListNode* nextptr;
        int cnt=0;
        while(currptr!=NULL && cnt<k){
            nextptr=currptr->next;
            currptr->next=prevptr;
            prevptr=currptr;
            currptr=nextptr;
            cnt++;
        }

        if(nextptr!=NULL)
        head->next= reverseK(nextptr,k);
        return prevptr;
    }
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL || head->next==NULL)return head;
        ListNode* ans =reverseK(head,2);
        return ans;
        
    }
};
