class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool sol(int src,vector<int> adj[],int vis[]){
        vis[src]=1;
        queue<pair<int,int>> q;
        q.push({src,-1});
        while(!q.empty()){
            int node=q.front().first;
            int parent=q.front().second;
            q.pop();
            for(auto ad:adj[node]){
                if(!vis[ad]){
                    vis[ad]=1;
                    q.push({ad,node});
                }
                else if(parent!=ad){
                    return true;
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
       int vis[V]={0};
       for(int i=0;i<V;i++){
           if(!vis[i]){
               if(sol(i,adj,vis)==true)
               return true;
           }
       }
       return false;
    }
};
