class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& g) {
        int n=g.size();
        if(g[0][0]==1 || g[n-1][n-1]==1) return -1;
        vector<vector<int>> vis(n,vector<int>(n,0));
        queue<pair<pair<int,int>,int>> q;
        q.push({{0,0},1}); //row,col,dist
        vis[0][0]=1;
        while(!q.empty()){
            int r=q.front().first.first;
            int c=q.front().first.second;
            int dis=q.front().second;
            q.pop();
            if(r==n-1 && c==n-1) return dis;  
            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    int nrow=r+i;
                    int ncol=c+j;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && !vis[nrow][ncol] && g[nrow][ncol]==0){
                        vis[nrow][ncol]=1;
                        q.push({{nrow,ncol},dis+1});
                    }
                }
            }
        }
return -1;
    }
};
