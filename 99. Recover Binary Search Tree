/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
bool f1=true;
bool f2=true;
void inorder(TreeNode* root,vector<int> &res){
    if(root==NULL)return ; 
    inorder(root->left,res);
    res.push_back(root->val);
    inorder(root->right,res);
}
void solve(TreeNode* &root,int a,int b){
    if(root==NULL) return;
    if(root->val==a && f1){root->val=b; f1=false;}
    else if(root->val==b && f2) {root->val=a; f2=false;}
    solve(root->left,a,b);
    solve(root->right,a,b);
   
}
    void recoverTree(TreeNode* root) {
        vector<int> res;
        inorder(root,res);
        TreeNode* curr=root;
        vector<int> v=res;
        sort(v.begin(),v.end());
        for(int i=0;i<v.size();i++){
            if(v[i]!=res[i]){
                int a=v[i];
                int b=res[i];
                solve(curr,a,b);
                break;
            }
        }
    }
};
