/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
bool isCycle(ListNode* root){
    ListNode* slow=root;
    ListNode* fast=root;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast= fast->next->next;
        if(slow==fast)return true;
    }
    return false;
}
    ListNode *detectCycle(ListNode *head) {
        if(head==NULL || head->next==NULL) return NULL;
        if(!isCycle(head)) return NULL;
        ListNode* slow=head;
        ListNode* fast=head;
        do{
            slow=slow->next;
            fast=fast->next->next;
        }while(slow!=fast);
        fast=head;
        while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
        }
        return slow;

    }
    
};
